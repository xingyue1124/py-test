{"name": "test_commonapi[case2]", "status": "broken", "statusDetails": {"message": "ValueError: incomplete format", "trace": "self = <api.api_auto_framework_pytest.tools.convertoperator.operatorConvert object at 0x000001F80DD26E50>\nbody = '{\"token\": \"$loginvar.token$\"}'\n\n    def convertBody(self, body):\n        logger.info(\"----找出存在可变变量区间块----\")\n        # 找出变量区间块\n        try:\n            listsplitvar = body.split('$')\n            num = 0\n            for strrequest in listsplitvar:\n                logger.info(\"----分割字符串----\")\n                # 从$分割字符串，奇数的得到要取代的块\n                if num % 2 == 1:\n                    # 取代的块赋值给strchuck\n                    strchuck = strrequest\n                    # 找到全局变量名称\n                    logger.info(\"----找块中全局变量的名称----\")\n                    stevar = strchuck[:strchuck.find('.')]\n                    # 从depend获取变量值\n                    logger.info(\"----获取全局变量json值----\")\n>                   varvalue = depend[stevar]\nE                   KeyError: 'loginvar'\n\ntools\\convertoperator.py:26: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <common_pytest.Test_Case object at 0x000001F80F56CCD0>\ncase = ['http://39.98.138.157:5000/api/getuserinfo', None, '{\"token\": \"$loginvar.token$\"}', 'get', 'url', '17890', ...]\n\n    @pytest.mark.parametrize(\"case\", excelData().get_excel_data())\n    def test_commonapi(self, case):\n        print(case)\n        url = case[0]\n        body = case[1]\n        header = case[2]\n        method = case[3]\n        method_type = case[4]\n        expect = case[5]\n        jsonpaths = case[6]\n        dependency = case[7]\n    \n        logger.info(\"用例数据拆包开始。。。。\")\n        print(url + \"-\" + str(body) + \"-\" + str(\n            header) + \"-\" + method + \"-\" + method_type + \"-\" + str(expect) + \"-\" + jsonpaths + \"-\" + dependency)\n        common = request_Common()\n        logger.info(\"替换body中的空格换行特殊字符开始。。。。\")\n        body = body.replace('\\r', '').replace('\\n', '').replace('\\t', '') if body is not None else \"\"\n    \n        logger.info(\"转换存在可变变量开始。。。。\")\n        # 假如body中存在变量获取符号，调用convertBody重新对变量进行转化\n        body = operatorConvert().convertBody(body) if body.find('$') >= 0 else body\n>       header = operatorConvert().convertBody(header) if (header is not None and header.find('$') >= 0) else header\n\nframeworkddt\\common_pytest.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\convertoperator.py:42: in convertBody\n    logger.error(\"替换变量块出错，请查看问题！原因: s%\", e)\nE:\\Python38\\lib\\logging\\__init__.py:1463: in error\n    self._log(ERROR, msg, args, **kwargs)\nE:\\Python38\\lib\\logging\\__init__.py:1577: in _log\n    self.handle(record)\nE:\\Python38\\lib\\logging\\__init__.py:1587: in handle\n    self.callHandlers(record)\nE:\\Python38\\lib\\logging\\__init__.py:1649: in callHandlers\n    hdlr.handle(record)\nE:\\Python38\\lib\\logging\\__init__.py:950: in handle\n    self.emit(record)\nE:\\Python38\\lib\\site-packages\\_pytest\\logging.py:326: in emit\n    super().emit(record)\nE:\\Python38\\lib\\logging\\__init__.py:1089: in emit\n    self.handleError(record)\nE:\\Python38\\lib\\logging\\__init__.py:1081: in emit\n    msg = self.format(record)\nE:\\Python38\\lib\\logging\\__init__.py:925: in format\n    return fmt.format(record)\nE:\\Python38\\lib\\site-packages\\_pytest\\logging.py:89: in format\n    return super().format(record)\nE:\\Python38\\lib\\logging\\__init__.py:664: in format\n    record.message = record.getMessage()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <LogRecord: root, 40, C:\\Users\\xingy\\PycharmProjects\\untitled\\api\\api_auto_framework_pytest\\tools\\convertoperator.py, 42, \"替换变量块出错，请查看问题！原因: s%\">\n\n    def getMessage(self):\n        \"\"\"\n        Return the message for this LogRecord.\n    \n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        \"\"\"\n        msg = str(self.msg)\n        if self.args:\n>           msg = msg % self.args\nE           ValueError: incomplete format\n\nE:\\Python38\\lib\\logging\\__init__.py:369: ValueError"}, "attachments": [{"name": "log", "source": "3e48dfb7-d6f6-45af-970b-884e1731dcc4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "['http://39.98.138.157:5000/api/getuserinfo', None, '{\"token\": \"$loginvar.token$\"}', 'get', 'url', '17890', \"$.data[0]['userid']\", 'uservar']"}], "start": 1598512906563, "stop": 1598512906667, "uuid": "fafa5076-391a-419c-ba98-f2c9289a9458", "historyId": "94b19e1c5db7ecd56b27ac02c93522a1", "testCaseId": "c9118d79c34330d55a3dc3266076beaf", "fullName": "frameworkddt.common_pytest.Test_Case#test_commonapi", "labels": [{"name": "parentSuite", "value": "frameworkddt"}, {"name": "suite", "value": "common_pytest"}, {"name": "subSuite", "value": "Test_Case"}, {"name": "host", "value": "DESKTOP-TIPOTAF"}, {"name": "thread", "value": "6840-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "frameworkddt.common_pytest"}]}